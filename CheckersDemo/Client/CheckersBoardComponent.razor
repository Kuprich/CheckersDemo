
<div class="board">

    @for (int i = 0; i < 8; i++)
    {
        int row = i;
        <div class="board__row">
            @for (var j = 0; j < 8; j++)
            {
                int col = j;

                var cell = new Cell(row, col);

                var checker = _board.GetChecker(cell);

                
                bool checkerIsEnabled = _board.EnabledCheckers.Contains(checker);
                bool checkerIsJumped = _board.JumpedCheckers.Contains(checker);
                bool cellIsActive = _board.ActiveCells?.Contains(cell) ?? false;

                <div @onclick="() => CellClicked(cell)" class="board__cell @(cellIsActive ? "board__cell-active": "")">
                    @{
                        if (checker != null)
                        {
                            <div @onclick="() => CheckerClicked(checker)" class="checker checker-@(checker.IsWhite ? "white" : "black" ) @(checkerIsEnabled ? "checker-enabled": "") @(checker.Direction == CheckerDirection.Both ? "checker-king" : "")">
                                @if (checkerIsJumped)
                                {
                                    <span>J</span>
                                }
                            </div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>


@code {
    CheckersBoard _board = new();


    private void CheckerClicked(Checker checker)
    {
        if (_board.EnabledCheckers.Contains(checker))
        {
            _board.ActiveChecker = checker;
        }
    }

    private void CellClicked(Cell cell)
    {
        if (_board.ActiveCells?.Contains(cell) != false)
        {
            _board.MoveActiveCheckerTo(cell);
        }
    }
}


<div class="board">

    @for (int i = 0; i < 8; i++)
    {
        int row = i;
        <div class="board__row">
            @for (var j = 0; j < 8; j++)
            {
                int col = j;

                var checker = _board.GetChecker(row, col);

                bool checkerIsEnabled = _board.EnabledCheckers.Contains(checker);

                bool cellIsActive = _board.ActiveCells?.Contains(new(row, col)) ?? false;

                <div class="board__cell @(cellIsActive ? "board__cell-active": "")">
                    @{
                        if (checker != null)
                        {
                            <div @onclick="() => CheckerClicked(checker)" class="checker checker-@(checker.IsWhite ? "white" : "black" ) @(checkerIsEnabled ? "checker-enabled": "") @(checker.Direction == CheckerDirection.Both ? "checker-king" : "")"></div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>


@code {
    CheckersBoard _board = new();

    private void CheckerClicked(Checker checker)
    {
        if (_board.EnabledCheckers.Contains(checker)){
            _board.ActiveChecker = checker;
        }

        //if (_board.AttaсkingChecker != null && _board.ActiveChecker != checker)
        //{
        //    return;
        //}

        //_board.ActiveChecker = null;
        //_board.CellsPossible = new();

        ////order of moves;
        //if (_board.WhiteTurn && !checker.IsWhite ||
        //    !_board.WhiteTurn && checker.IsWhite) return;

        //// possibility of jump
        //bool isPossibleJump = false;

        //var checkers = _board.Checkers.Where(x => x.IsWhite.Equals(_board.WhiteTurn)).ToList();

        //foreach (var ch in checkers)
        //    if (ch != null && _board.EvaluateSpotForJump(ch).Any())
        //    {
        //        isPossibleJump = true;
        //        break;
        //    }

        //if (!isPossibleJump.Equals(_board.EvaluateSpotForJump(checker).Any()))
        //{
        //    return;
        //}


        //_board.CellsPossible = EvaluateCheckerSpots(checker);

        //if (!_board.CellsPossible.Any())
        //{
        //    return;
        //}

        //_board.ActiveChecker = checker;

    }

    private List<Cell> EvaluateCheckerSpots(Checker checker)
    {
        return new();
        //List<Cell> result = new();

        //result.AddRange(_board.EvaluateSpotForJump(checker));

        //if (!result.Any())
        //{
        //    result.AddRange(_board.EvaluateSpotForMove(checker));
        //}

        //return result;
    }

}

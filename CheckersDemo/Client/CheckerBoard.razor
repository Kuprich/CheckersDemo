
<div class="board">
    @for (int i = 0; i < 8; i++)
    {
        int row = i;
        <div class="board__row">
            @for (var j = 0; j < 8; j++)
            {
                int col = j;
                var checker = _blackCheckers.FirstOrDefault(x => x.Row == row && x.Column == col);
                if (checker == null)
                {
                    checker = _whiteCheckers.FirstOrDefault(x => x.Row == row && x.Column == col);
                }

                bool canMoveHere = cellsPossible.Contains((row, col));

                <div @onclick="() => MoveChecker(row, col)" class="board__col @(canMoveHere ? "board__col-active": "")">
                    @{
                        if (checker != null)
                        {
                            <div @onclick="() => CheckerClicked(checker)" class="checker checker-@checker.Color @(_activeChecker == checker ? "checker-active": "") @(checker.Direction == CheckerDirection.Both ? "checker-king" : "")"></div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>


@code {
    List<Checker> _whiteCheckers = new List<Checker>();
    List<Checker> _blackCheckers = new List<Checker>();
    Checker? _activeChecker = null;
    bool _whiteTurn = true;

    List<(int row, int col)> cellsPossible = new();

    protected override Task OnInitializedAsync()
    {
        for (int row = 0; row < 3; row++)
        {
            for (int col = (row + 1) % 2; col < 8; col += 2)
            {
                _blackCheckers.Add(new Checker(row, col, CheckerDirection.Down, "black"));
            }
        }

        for (int row = 5; row < 8; row++)
        {
            for (int col = (row + 1) % 2; col < 8; col += 2)
            {
                _whiteCheckers.Add(new Checker(row, col, CheckerDirection.Up, "white"));
            }
        }

        return base.OnInitializedAsync();
    }

    private void CheckerClicked(Checker checker)
    {
        if (_whiteTurn && checker.Color != "white" ||
            !_whiteTurn && checker.Color != "black")
        {
            return;
        }

        _activeChecker = checker;
        EvaluateCheckerSpots();
    }

    private void EvaluateCheckerSpots()
    {
        cellsPossible.Clear();

        if (_activeChecker != null)
        {
            List<int> rowsPossible = new();

            if (_activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.AddRange(new[] { _activeChecker.Row + 1, _activeChecker.Row - 1 });
            }
            else
            {
                rowsPossible.Add(_activeChecker.Row + (1 * (_activeChecker.Direction == CheckerDirection.Down ? 1 : -1)));
            }

            foreach (int row in rowsPossible)
            {
                EvaluateSpot(row, _activeChecker.Column + 1);
                EvaluateSpot(row, _activeChecker.Column - 1);
            }

            //can jumping here
            if 

        }
    }
    private void EvaluateSpot(int row, int col)
    {

        var blackChecker = _blackCheckers.FirstOrDefault(x => x.Row == row && x.Column == col);
        var whiteChecker = _whiteCheckers.FirstOrDefault(x => x.Row == row && x.Column == col);

        if (blackChecker == null && whiteChecker == null)
        {
            cellsPossible.Add((row, col));
        }
    }
    private void MoveChecker(int row, int col)
    {

        bool canMoveHere = cellsPossible.Contains((row, col));
        if (!canMoveHere) return;

        if (_activeChecker != null)
        {
            _activeChecker.Column = col;
            _activeChecker.Row = row;

            if (_activeChecker.Row == 0 && _activeChecker.Color == "white" ||
                _activeChecker.Row == 7 && _activeChecker.Color == "black")
            {
                _activeChecker.Direction = CheckerDirection.Both;
            }
        }

        _activeChecker = null;
        _whiteTurn = !_whiteTurn;
        EvaluateCheckerSpots();

    }
}
